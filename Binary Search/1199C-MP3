#include <bits/stdc++.h>
#include <string.h>
#define int long long
#define MAX (int)(1e7+5)
#define MAX2D (int)(1e3+5)
#define itn int
#define inf 5e18
#define MOD (int)(1e9 + 7)
#define pb push_back
#define mk make_pair
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(),x.rend()
#define pii pair<int, int>
#define vii vector<pii>
#define vi vector<int>
#define test  \
    int t;    \
    cin >> t; \
    while (t--)
#define fast                       \
    ios_base ::sync_with_stdio(0); \
    cin.tie(NULL);                 \
    cout.tie(NULL)
using namespace std;

int n, I, maxK;
const int N = 4e5+1;
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
//Now we can simply define our unordered_map or our gp_hash_table as follows:
//Use either, both are significantly fast


bool ok(int m, vi a) {
    unordered_map<int,int, custom_hash> mp;
    for(int i=0;i<m;i++) mp[a[i]]++;
    if(mp.size() <= maxK) return true;
    int g = mp.size();
    for(int i=1;i<n-m+1;i++) {
        mp[a[i-1]]--, mp[a[m+i-1]]++;
        if(a[i-1] != a[m+i-1]) {
            if(mp[a[i-1]] == 0) g--;
            if(mp[a[m+i-1]] == 1) g++;
        } 
        if(g <= maxK) return true;
    }
    return false;
}

int g(vi a) {
    int l = 1, r = n;
    int ans = l;
    while(l <= r) {
        int mid = (l+r)/2;
        if(ok(mid,a)) ans = mid, l = mid+1;
        else r = mid-1;
    }
    return ans;
}

signed main()
{
    fast;
    cin>>n>>I;
    vi a(n);
    I *= 8;
    for(int i=0;i<n;i++) cin>>a[i];
    sort(all(a));
    maxK = pow(2,(I/n));
    int ans = g(a);
    cout<<n-ans;
    return 0;   
}
